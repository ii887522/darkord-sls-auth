service: auth-api
frameworkVersion: "3"

provider:
  name: aws
  deploymentMethod: direct
  profile: ${param:profile}
  region: ${param:region}
  runtime: provided.al2023
  memorySize: ${param:memorySize}
  architecture: arm64
  logRetentionInDays: ${param:logRetentionInDays}
  disableRollback: ${param:disableRollback}
  deploymentBucket:
    name: darkord-sls-${sls:stage}-deployment-bucket
    serverSideEncryption: AES256
    blockPublicAccess: true
  apiGateway:
    restApiId: ${param:restApiId}
    restApiRootResourceId: ${param:restApiRootResourceId}
  environment:
    RUST_LOG: ${param:logLevel}
    REGION: ${param:region}
    STAGE: ${sls:stage}
    STAGE_PREFIX: ${param:stagePrefix}
    STAGE_DASH_PREFIX: ${param:stageDashPrefix}
  # For now it is sufficient to not use AWS X-Ray tracing to develop this microservice. Comment out to save cost
  # tracing:
  #   lambda: true

params:
  stage:
    profile: darkord-stage
    region: us-east-1
    memorySize: 128
    logRetentionInDays: 7
    disableRollback: true
    restApiId: ns1o12mqe1
    restApiRootResourceId: webfruxv5f
    logLevel: INFO
    stagePrefix: stage_
    stageDashPrefix: stage-
    authorizerId: pmob2d

    # Max action attempts
    maxSignUpAttempt: 20
    maxVerifyAttrAttempt: 3
    maxInitMfaAttempt: 1
    maxLoginAttempt: 20
    maxVerifyMfaAttempt: 3

  prod:
    profile: darkord
    region: ap-southeast-1
    memorySize: 256
    logRetentionInDays: 7
    disableRollback: false
    restApiId: udz4iyqum3
    restApiRootResourceId: sonnsq55fh
    logLevel: INFO
    stagePrefix: ""
    stageDashPrefix: ""
    authorizerId: "" # todo: Deploy authorizer to production and note the ID

    # Max action attempts
    maxSignUpAttempt: 20
    maxVerifyAttrAttempt: 3
    maxInitMfaAttempt: 1
    maxLoginAttempt: 20
    maxVerifyMfaAttempt: 3

custom:
  prune:
    automatic: true
    includeLayers: true
    number: 5
  rust:
    cargoLambda:
      docker: false

package:
  individually: true
  patterns:
    - "!**"

functions:
  sign-up:
    handler: sign-up
    memorySize: 256
    package:
      patterns:
        - "sign-up/**"
    iamRoleStatements:
      - Effect: Allow
        Action:
          - ssm:GetParameter
        Resource:
          - arn:aws:ssm:${param:region}:${aws:accountId}:parameter/auth/api/token/session
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:PutItem
          - dynamodb:UpdateItem
        Resource:
          - arn:aws:dynamodb:${param:region}:${aws:accountId}:table/${param:stagePrefix}auth_attempt
      - Effect: Allow
        Action:
          - dynamodb:PutItem
          - dynamodb:UpdateItem
        Resource:
          - arn:aws:dynamodb:${param:region}:${aws:accountId}:table/${param:stagePrefix}auth_user
    events:
      - http:
          method: POST
          path: /auth/user
          private: true
    environment:
      MAX_SIGN_UP_ATTEMPT: ${param:maxSignUpAttempt}
  verify-attr:
    handler: verify-attr
    package:
      patterns:
        - "verify-attr/**"
    iamRoleStatements:
      - Effect: Allow
        Action:
          - ssm:GetParameter
        Resource:
          - arn:aws:ssm:${param:region}:${aws:accountId}:parameter/auth/api/token/session
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:PutItem
          - dynamodb:UpdateItem
        Resource:
          - arn:aws:dynamodb:${param:region}:${aws:accountId}:table/${param:stagePrefix}auth_attempt
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:UpdateItem
        Resource:
          - arn:aws:dynamodb:${param:region}:${aws:accountId}:table/${param:stagePrefix}auth_user
    events:
      - http:
          method: POST
          path: /auth/verify_attr
          private: true
          authorizer:
            type: TOKEN
            authorizerId: ${param:authorizerId}
    environment:
      MAX_VERIFY_ATTR_ATTEMPT: ${param:maxVerifyAttrAttempt}
  init-mfa:
    handler: init-mfa
    package:
      patterns:
        - "init-mfa/**"
    iamRoleStatements:
      - Effect: Allow
        Action:
          - ssm:GetParameter
        Resource:
          - arn:aws:ssm:${param:region}:${aws:accountId}:parameter/auth/api/mfa
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:PutItem
          - dynamodb:UpdateItem
        Resource:
          - arn:aws:dynamodb:${param:region}:${aws:accountId}:table/${param:stagePrefix}auth_attempt
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:UpdateItem
        Resource:
          - arn:aws:dynamodb:${param:region}:${aws:accountId}:table/${param:stagePrefix}auth_user
    events:
      - http:
          method: POST
          path: /auth/init_mfa
          private: true
          authorizer:
            type: TOKEN
            authorizerId: ${param:authorizerId}
    environment:
      MAX_INIT_MFA_ATTEMPT: ${param:maxInitMfaAttempt}
  login:
    handler: login
    memorySize: 256
    package:
      patterns:
        - "login/**"
    iamRoleStatements:
      - Effect: Allow
        Action:
          - ssm:GetParameter
        Resource:
          - arn:aws:ssm:${param:region}:${aws:accountId}:parameter/auth/api/token/session
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:PutItem
          - dynamodb:UpdateItem
        Resource:
          - arn:aws:dynamodb:${param:region}:${aws:accountId}:table/${param:stagePrefix}auth_attempt
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Resource:
          - arn:aws:dynamodb:${param:region}:${aws:accountId}:table/${param:stagePrefix}auth_user
    events:
      - http:
          method: POST
          path: /auth/login
          private: true
    environment:
      MAX_LOGIN_ATTEMPT: ${param:maxLoginAttempt}
  verify-mfa:
    handler: verify-mfa
    package:
      patterns:
        - "verify-mfa/**"
    iamRoleStatements:
      - Effect: Allow
        Action:
          - ssm:GetParametersByPath
        Resource:
          - arn:aws:ssm:${param:region}:${aws:accountId}:parameter/auth/api/token
      - Effect: Allow
        Action:
          - ssm:GetParameter
        Resource:
          - arn:aws:ssm:${param:region}:${aws:accountId}:parameter/auth/api/mfa
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:PutItem
          - dynamodb:UpdateItem
        Resource:
          - arn:aws:dynamodb:${param:region}:${aws:accountId}:table/${param:stagePrefix}auth_attempt
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Resource:
          - arn:aws:dynamodb:${param:region}:${aws:accountId}:table/${param:stagePrefix}auth_user
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource:
          - arn:aws:dynamodb:${param:region}:${aws:accountId}:table/${param:stagePrefix}auth_valid_token_pair
    events:
      - http:
          method: POST
          path: /auth/verify_mfa
          private: true
          authorizer:
            type: TOKEN
            authorizerId: ${param:authorizerId}
    environment:
      MAX_VERIFY_MFA_ATTEMPT: ${param:maxVerifyMfaAttempt}
  refresh:
    handler: refresh
    package:
      patterns:
        - "refresh/**"
    iamRoleStatements:
      - Effect: Allow
        Action:
          - ssm:GetParameter
        Resource:
          - arn:aws:ssm:${param:region}:${aws:accountId}:parameter/auth/api/token/access
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource:
          - arn:aws:dynamodb:${param:region}:${aws:accountId}:table/${param:stagePrefix}auth_valid_token_pair
    events:
      - http:
          method: POST
          path: /auth/refresh
          private: true
          authorizer:
            type: TOKEN
            authorizerId: ${param:authorizerId}
  logout:
    handler: logout
    package:
      patterns:
        - "logout/**"
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
        Resource:
          - arn:aws:dynamodb:${param:region}:${aws:accountId}:table/${param:stagePrefix}auth_valid_token_pair
    events:
      - http:
          method: POST
          path: /auth/logout
          private: true
          authorizer:
            type: TOKEN
            authorizerId: ${param:authorizerId}

plugins:
  - serverless-better-credentials # Must be the first one in this list for this to work
  - serverless-rust-plugin
  - serverless-prune-plugin
  - serverless-iam-roles-per-function
  - serverless-deployment-bucket
