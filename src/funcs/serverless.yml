service: auth-funcs
frameworkVersion: "3"

provider:
  name: aws
  deploymentMethod: direct
  runtime: python3.11
  profile: ${param:profile}
  region: ${param:region}
  memorySize: ${param:memorySize}
  architecture: arm64
  logRetentionInDays: ${param:logRetentionInDays}
  disableRollback: ${param:disableRollback}
  deploymentBucket:
    name: darkord-sls-${sls:stage}-deployment-bucket
    serverSideEncryption: AES256
    blockPublicAccess: true
  environment:
    LOG_LEVEL: ${param:logLevel}
    REGION: ${param:region}
    STAGE: ${sls:stage}
    STAGE_PREFIX: ${param:stagePrefix}
    STAGE_DASH_PREFIX: ${param:stageDashPrefix}
  # For now it is sufficient to not use AWS X-Ray tracing to develop this microservice. Comment out to save cost
  # tracing:
  #   lambda: true

params:
  stage:
    profile: darkord-stage
    region: us-east-1
    memorySize: 192
    logRetentionInDays: 7
    disableRollback: true
    logLevel: INFO
    stagePrefix: stage_
    stageDashPrefix: stage-

    # Layer ARNs
    commonLayerArn: arn:aws:lambda:us-east-1:${aws:accountId}:layer:common-layer:latest
    moduleLayerArn: arn:aws:lambda:us-east-1:${aws:accountId}:layer:auth-layer:latest

  prod:
    profile: darkord
    region: ap-southeast-1
    memorySize: 384
    logRetentionInDays: 7
    disableRollback: false
    logLevel: INFO
    stagePrefix: ""
    stageDashPrefix: ""

    # Layer ARNs
    commonLayerArn: arn:aws:lambda:ap-southeast-1:${aws:accountId}:layer:common-layer:latest
    moduleLayerArn: arn:aws:lambda:ap-southeast-1:${aws:accountId}:layer:auth-layer:latest

custom:
  prune:
    automatic: true
    includeLayers: true
    number: 5

package:
  individually: true
  patterns:
    - "!**"

functions:
  authorize:
    handler: authorize/handler.handler
    package:
      patterns:
        - "authorize/**"
    iamRoleStatements:
      - Effect: Allow
        Action:
          - ssm:GetParametersByPath
        Resource:
          - arn:aws:ssm:${param:region}:${aws:accountId}:parameter/auth/api/token
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Resource:
          - arn:aws:dynamodb:${param:region}:${aws:accountId}:table/${param:stagePrefix}auth_valid_token_pair
          - arn:aws:dynamodb:${param:region}:${aws:accountId}:table/${param:stagePrefix}auth_rbac
    layers:
      - ${param:commonLayerArn}
      - ${param:moduleLayerArn}

plugins:
  - serverless-better-credentials # Must be the first one in this list for this to work
  - serverless-prune-plugin
  - serverless-iam-roles-per-function
  - serverless-deployment-bucket
  - serverless-latest-layer-version
