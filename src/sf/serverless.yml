service: auth-sf
frameworkVersion: "3"

provider:
  name: aws
  deploymentMethod: direct
  profile: ${param:profile}
  region: ${param:region}
  runtime: provided.al2023
  memorySize: ${param:memorySize}
  architecture: arm64
  logRetentionInDays: ${param:logRetentionInDays}
  disableRollback: ${param:disableRollback}
  deploymentBucket:
    name: darkord-sls-${sls:stage}-deployment-bucket
    serverSideEncryption: AES256
  environment:
    RUST_LOG: ${param:logLevel}
    REGION: ${param:region}
    STAGE: ${sls:stage}
    STAGE_PREFIX: ${param:stagePrefix}
    STAGE_DASH_PREFIX: ${param:stageDashPrefix}
  # For now it is sufficient to not use AWS X-Ray tracing to develop this microservice. Comment out to save cost
  # tracing:
  #   lambda: true

params:
  stage:
    profile: darkord-stage
    region: us-east-1
    memorySize: 128
    logRetentionInDays: 7
    disableRollback: true
    logLevel: INFO
    stagePrefix: stage_
    stageDashPrefix: stage-

    # API key names
    restApiKeyName: darkord-flutter-stage-rest-api-key
    wsApiKeyName: darkord-flutter-stage-ws-api-key

    # CloudFront distributions
    cfDistributionId: E1P9RYVNZM3LAL
    cfOriginRestApiDomainName: ns1o12mqe1.execute-api.us-east-1.amazonaws.com
    cfOriginWsApiDomainName: nb521atnpd.execute-api.us-east-1.amazonaws.com

  prod:
    profile: darkord
    region: ap-southeast-1
    memorySize: 256
    logRetentionInDays: 14
    disableRollback: false
    logLevel: INFO
    stagePrefix: ""
    stageDashPrefix: ""

    # API key names
    restApiKeyName: darkord-flutter-rest-api-key
    wsApiKeyName: darkord-flutter-ws-api-key

    # CloudFront
    cfDistributionId: E1L8FGDB1BRFWF
    cfOriginRestApiDomainName: udz4iyqum3.execute-api.ap-southeast-1.amazonaws.com
    cfOriginWsApiDomainName: f55d4hf4ak.execute-api.ap-southeast-1.amazonaws.com

custom:
  deploymentBucket:
    blockPublicAccess: true
  prune:
    automatic: true
    includeLayers: true
    number: 5
  rust:
    cargoLambda:
      docker: false

package:
  individually: true
  patterns:
    - "!**"

functions:
  sf-update-secrets:
    handler: sf-update-secrets
    package:
      patterns:
        - "sf-update-secrets/**"
    iamRoleStatements:
      - Effect: Allow
        Action:
          - apigateway:CreateApiKey
        Resource:
          - arn:aws:apigateway:${param:region}::/*
      - Effect: Allow
        Action:
          - cloudfront:GetDistributionConfig
          - cloudfront:UpdateDistribution
        Resource:
          - arn:aws:cloudfront::${aws:accountId}:distribution/${param:cfDistributionId}
      - Effect: Allow
        Action:
          - ssm:GetParametersByPath
          - ssm:PutParameter
          - ssm:GetParameter
        Resource:
          - arn:aws:ssm:${param:region}:${aws:accountId}:parameter/auth/api/token/*
          - arn:aws:ssm:${param:region}:${aws:accountId}:parameter/auth/api/mfa
          - arn:aws:ssm:${param:region}:${aws:accountId}:parameter/auth/api/mfa/*
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:PutItem
          - dynamodb:UpdateItem
        Resource:
          - arn:aws:dynamodb:${param:region}:${aws:accountId}:table/${param:stagePrefix}auth_user
    environment:
      REST_API_KEY_NAME: ${param:restApiKeyName}
      WS_API_KEY_NAME: ${param:wsApiKeyName}
      CF_DISTRIBUTION_ID: ${param:cfDistributionId}
      CF_ORIGIN_REST_API_DOMAIN_NAME: ${param:cfOriginRestApiDomainName}
      CF_ORIGIN_WS_API_DOMAIN_NAME: ${param:cfOriginWsApiDomainName}
  sf-delete-old-secrets:
    handler: sf-delete-old-secrets
    package:
      patterns:
        - "sf-delete-old-secrets/**"
    iamRoleStatements:
      - Effect: Allow
        Action:
          - apigateway:CreateApiKey
        Resource:
          - arn:aws:apigateway:${param:region}::/*
      - Effect: Allow
        Action:
          - cloudfront:GetDistributionConfig
          - cloudfront:UpdateDistribution
        Resource:
          - arn:aws:cloudfront::${aws:accountId}:distribution/${param:cfDistributionId}
      - Effect: Allow
        Action:
          - ssm:GetParametersByPath
          - ssm:PutParameter
          - ssm:GetParameter
        Resource:
          - arn:aws:ssm:${param:region}:${aws:accountId}:parameter/auth/api/token/*
          - arn:aws:ssm:${param:region}:${aws:accountId}:parameter/auth/api/mfa
          - arn:aws:ssm:${param:region}:${aws:accountId}:parameter/auth/api/mfa/*
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:PutItem
          - dynamodb:UpdateItem
        Resource:
          - arn:aws:dynamodb:${param:region}:${aws:accountId}:table/${param:stagePrefix}auth_user

plugins:
  - serverless-better-credentials # Must be the first one in this list for this to work
  - serverless-rust-plugin
  - serverless-prune-plugin
  - serverless-iam-roles-per-function
  - serverless-deployment-bucket
